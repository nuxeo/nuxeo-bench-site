# Here you can comment bench suite using markdown
"Nuxeo 9.1": "- A new **MarkLogic** backend has been added to the benchmark matrix.


- Since LTS 2016 the **import** has been tuned on DBS (MongoDB and MarkLogic) to [remove contentions](https://jira.nuxeo.com/browse/NXP-21712),
  [reduce the number of queries](https://jira.nuxeo.com/browse/NXP-20595) and [make cache more efficient](https://jira.nuxeo.com/browse/NXP-21678),
  improving the import throughput by **20%**.


- The **Elasticsearch reindexing** has been improved by [limiting the size of bulk command](https://jira.nuxeo.com/browse/NXP-21227) and by [reducing the JSON representation](https://jira.nuxeo.com/browse/NXP-21677),
  resulting in a **33%** gain.


- There are some regression on write and search REST operation, some are related to GC problem after JSF benchmarks, [investigations in process](https://jira.nuxeo.com/browse/NXBT-1731).
"

"Nuxeo LTS 2016": "**Import**


- The nuxeo-importer is run on a single node so the synchronous part do not benefit of having multiple Nuxeo node.
  The limitation is mostly `Nuxeo CPU` at the beginning (especially for SQL backend) then `Nuxeo IO on S3`, then `SQL Backend IO`
  and `Backend CPU`.


- The asynchronous part [has been optimized](/misc/#16w11%20NXP-17934%2fNXP-17862%20audit%20and%20fulltext%20updater) since 7.10 LTS.


**Create**


- Create and Update tests scales with the number of nodes, and it is the limitation is on `Nuxeo CPU`, MongoDB is much faster than in 7.10 because [a cache has been introduced](/misc/index.html#16w44%20NXP-20640%20DBS%20cache%20enabled) to reduce the CPU load related to queries.


**Read**


- This scales with the number of Nuxeo nodes. Here also the DBS cache works fine for MongoDB and can give more than 50% gain compared to the previous LTS.


**Search**


- The switch from Elasticsearch 1.x to 2.x with the default options [shows a performance regression](/misc/index.html#16w35%20NXP-19194%20Elasticsearch%202.x)


**Update**


- Same as Create but it requires less resources from the backend, Redis overhead present on 7.10 has been fixed. Another possible limitation may be on
  the load concurrency that is not high enough.



**CRUD**


- Same as Update, mssql encounter errors on deletion [NXP-19335](https://jira.nuxeo.com/browse/NXP-19335).


**Reindex**


- For SQL Backend except for PostgreSQL limited by `Nuxeo VCS` impedance mismatch (slow document loading). For MongoDB and PostgreSQL limited by `Elasticsearch CPU`,
  the reindexing requires less memory footprint on Nuxeo and is now able to handle billion of documents.


"

"Nuxeo 8.3": "**Import**


- The nuxeo-importer is run on a single node so the synchronous part do not benefit of having multiple Nuxeo node.
  The limitation is mostly `Nuxeo CPU` at the beginning (especially for SQL backend) then `Nuxeo IO on S3`, then `SQL Backend IO`
  and `Backend CPU`.


- The asynchronous part [has been optimized](http://localhost:1313/misc/#16w11%20NXP-17934%2fNXP-17862%20audit%20and%20fulltext%20updater) since 8.1.
  When using more than 2 nodes the asynchonous jobs are processed in real time.


**Create**


- Create and Update tests scales with the number of nodes, and it is the limitation is on `Nuxeo CPU` then `Backend IO` once there are two Nuxeo nodes.


**Read**


- This scales with the number of Nuxeo nodes. The limitation is on `Nuxeo CPU` and backend latency.


**Search**


- This scales with the number of Nuxeo nodes as `Nuxeo CPU` is the first limitation.


**Update**


- Same as Create but it requires less resources from the backend, Redis overhead present on 8.1 has been fixed. Another possible limitation may be on
  the load concurrency that is not high enough.



**CRUD**


- Same as Update, mssql encounter errors on deletion [NXP-19335](https://jira.nuxeo.com/browse/NXP-19335).


**Reindex**


- For SQL Backend except for PostgreSQL limited by `Nuxeo VCS` impedance mismatch (slow document loading). For MongoDB and PostgreSQL limited by `Elasticsearch CPU`.


"


"16w35 NXP-19194 Elasticsearch 2.x": "The default Elasticsearch 2.x settings generates more disk IO on indexing and searching, the `index.translog.durability` is set by request and limits ES to the available IOPS (~750/3500 IOPS -> ~1000 req/s).
Also deletion is now handled with a scroll and deletes instead of a single recursive operation."


"16w23 NXP-19754 Test import with random dublincore properties": "**The nuxeo importer has been enhanced to generate random dublincore value:**


- This impacts the import throughput around 30%. It is still not clear if the limitation comes from the generation or the load that it creates on services
"

"16w17 NXP-19389 Search optim": "**To improve the new Search simulation results some optimizations have been done:**


- The simulations are using an empty header `X-NXfetch.document` that results in fetching all sub entities of documents
  (due to [NXP-19581](https://jira.nuxeo.com/browse/NXP-19581)).
  Not fetching all sub entities improves Reads throughput by **27%** and Search by **x2**.


- Adding a UserManager cache ([NXP-19584](https://jira.nuxeo.com/browse/NXP-19584)) helps on high throughput.
  Read simulation improves its throughput by **6%**.


- Relying on client to choose the locale instead of fetching it from the user preference [NXP-19588](https://jira.nuxeo.com/browse/NXP-19588) benefits to all REST
  access, giving a **40%** boost on Read simulation.


All cumulated the Read simulation has been improved by **x1.9** and the Search by **2.7**.


"

"Nuxeo 8.1": "**Import**


- The nuxeo-importer is run on a single node so the synchronous part do not benefit of having multiple Nuxeo node.
  The limitation is mostly `Nuxeo CPU` at the beginning then `Nuxeo IO on S3` with `Backend CPU`.


- The asynchronous part scale with the number of nodes. More async activity impacts the backend and can explain
  the throughput decrease on synchronous part when adding Nuxeo nodes.
  The limitation is mostly due to [fulltext updater](https://jira.nuxeo.com/browse/NXP-17862).


**Create/Update**


- For synchronous part the limitation is on `Nuxeo CPU` then `Backend IO` once there are two Nuxeo nodes.

- Same observation as the import for the asynchronous part.


**Navigation**


- This scales with the number of Nuxeo nodes. The limitation is on `Nuxeo CPU` and backend response time.


**Update**


- First limited by `Nuxeo CPU`, scale with more nodes then `Backend IO` limitation or `Redis CPU/IO` for MongoDB.

- The async time is incorrect [due to a bug](https://jira.nuxeo.com/browse/NXP-19092) under Redis OOM.



**CRUD**


- Same as Update, mssql encounter errors on deletion [NXP-19335](https://jira.nuxeo.com/browse/NXP-19335).


**Reindex**


- For SQL Backend limited by `Nuxeo VCS` impedance mismatch (slow document loading). For MongoDB limited by `Elasticsearch CPU`.

"

"16w12 NXBT-1018 Test default pool size": "Having more than 4 threads in the default pool improves very slightly
asynchronous tasks.


Using a bigger pool means working with more sessions and concurrency, this impacts the synchronous part.


So far it is not interesting to use more than 4 threads for the default pool.
This should be tested again once audit and ft updater optimizations are merged because
they are the first bottlenecks at the moment and they may prevent to see benefits of increasing the default pool size."


"16w11 NXP-17934/NXP-17862 audit and fulltext updater": "This benchmark suite contains 2 major optimizations:


- [NXP-17862](https://jira.nuxeo.com/browse/NXP-17862) Fulltext updater

- [NXP-17934](https://jira.nuxeo.com/browse/NXP-17934) Audit optimization refactoring


Theses optimizaton reduce asynchronous processing duration from **7x** to **11x**.

The gain comes mostly from the ft updater refactoring and 30% from audit refactoring.

The total benchmark duration is shorter from ~**75** min to ~**40** min.
"

"16w08 NXP-14923 Redis vs DB invalidation": "This suite test the default database cluster invalidation against the Redis
implementation [NXP-14923](https://jira.nuxeo.com/browse/NXP-14923).

On heavy concurrent write operation the gain can be around **2x**.
"
