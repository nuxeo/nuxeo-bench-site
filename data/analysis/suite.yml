# Here you can comment bench suite using markdown
"Nuxeo 8.1": "**Import**


- The nuxeo-importer is run on a single node so the synchronous part do not benefit of having multiple Nuxeo node.
  The limitation is mostly `Nuxeo CPU` at the begining then `Nuxeo IO on S3` with `Backend CPU`.


- The asynchronous part scale with the number of nodes. More async activity impacts the backend and can explain
  the throughput decrease on synchronous part when adding Nuxeo nodes.
  The limitation is mostly due to [fulltext updater](https://jira.nuxeo.com/browse/NXP-17862).


**Create/Update**


- For synchronous part the limitation is on `Nuxeo CPU` then `Backend IO` once there are two Nuxeo nodes.

- Same observation as the import for the asynchronous part.


**Navigation**


- This scales with the number of Nuxeo nodes. The limitation is on `Nuxeo CPU` and backend response time.


**Update**


- First limited by `Nuxeo CPU`, scale with more nodes then `Backend IO` limitation or `Redis CPU/IO` for MongoDB.

- The async time is incorrect [due to a bug](https://jira.nuxeo.com/browse/NXP-19092) under Redis OOM.



**CRUD**


- Same as Update, mssql encounter errors on deletion [NXP-19335](https://jira.nuxeo.com/browse/NXP-19335).


**Reindex**


- For SQL Backend limited by `Nuxeo VCS` impedance mismatch (slow document loading). For MongoDB limited by `Elasticsearch CPU`.


"

"16w12 NXBT-1018 Test default pool size": "Having more than 4 threads in the default pool increase very slightly
asynchronous activities. This affects also the synchronous parts.


So far it is not interesting to use more than 4 threads for the default pool.
This should be tested again when audit and ft updater optimizations are merged because
they are the first bottleneck and they may prevent to see benefits of increasing the pool size."


"16w11 NXP-17934/NXP-17862 audit and fulltext updater": "This benchmark suite contains 2 major optimizations:


- [NXP-17862](https://jira.nuxeo.com/browse/NXP-17862) Fulltext updater

- [NXP-17934](https://jira.nuxeo.com/browse/NXP-17934) Audit optimization refactoring


Theses optimizaton reduce asynchronous processing duration from **7x** to **11x**.

The gain comes mostly from the ft updater refactoring and 30% from audit refactoring.

The total benchmark duration is shorter from ~**75** min to ~**40** min.
"

"16w08 NXP-14923 Redis vs DB invalidation": "This suite test the default database cluster invalidation against the Redis
implementation [NXP-14923](https://jira.nuxeo.com/browse/NXP-14923).

On heavy concurrent write operation the gain can be around **2x**.
"
