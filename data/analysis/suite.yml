# Here you can comment bench suite using markdown
"Nuxeo 8.1": "**Import**


- The nuxeo-importer is run on a single node so the synchronous part do not benefit of having multiple Nuxeo node.
  The limitation is mostly Nuxeo CPU at the begining then Nuxeo (CPU + IO on S3) + Backend CPU.


- The asynchronous part scale with the number of node, more async activities impacts the synchronous part which
  explain sync thoughput decrease when adding Nuxeo nodes.
  The limitation is mostly due to [fulltext updater](https://jira.nuxeo.com/browse/NXP-17862).


**Create/Update**


- For synchronous part the limitation moves to the backend once there are 2 Nuxeo nodes.


**Navigation**


- This scales with the number of Nuxeo nodes. The limitation is on Nuxeo CPU and backend response time.


**CRUD**


- There are some randomness in the result here because the async time is incorrect [due to a bug|https://jira.nuxeo.com/browse/NXP-19092]


**Reindex**


- Limited by backend except for MongoDB where the limitation is Elasticsearch.


"

"16w11 NXP-17934/NXP-17862 audit and fulltext updater": "This benchmark suite contains 2 major optimizations:


- [NXP-17862](https://jira.nuxeo.com/browse/NXP-17862) Fulltext updater

- [NXP-17934](https://jira.nuxeo.com/browse/NXP-17934) Audit optimization refactoring


Theses optimizaton reduce asynchronous processing duration from **7x** to **11x**.

The gain comes mostly from the ft updater refactoring and 30% from audit refactoring.

The total benchmark duration is shorter from ~**75** min to ~**40** min.
"

"16w08 NXP-14923 Redis vs DB invalidation": "This suite test the default database cluster invalidation against the Redis
implementation [NXP-14923](https://jira.nuxeo.com/browse/NXP-14923).

On heavy concurrent write operation the gain can be around **2x**.
"
