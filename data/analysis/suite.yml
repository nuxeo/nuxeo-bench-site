# Here you can comment bench suite using markdown"

"Nuxeo 10.2": "
First, we have removed some randomness in the results due to some improper configuration:


- Since Nuxeo 9.3 and the switch to Elasticsearch 5.6, the
  elasticsearch translog configuration defaults to request for the
  audit and sequencer index. This has created lots of elasticsearch
  disk IO stress during massive write operation. Note that the
  repository index was set properly to async using the perf template
  since 9.3.  This 10.2 milestone benchmark is done with all
  elasticsearch index configured in translog async.


- Since Nuxeo 9.3 the audit writer is implemented using a Nuxeo stream
  and we were not waiting to flush the audit between simulations.
  This has created some randomness and has impacted elasticsearch
  performance on some simulations. This is now fixed


- On successive benchmark that reuses existing elasticsearch nodes the
  audit index was not always reset between benchmarks.


[NXP-23016](https://jira.nuxeo.com/browse/) has fixed a regression
responsible for increasing response time of all request by few
milliseconds. This fix enables to reach higher throughput.


**import** Limited by a single node doing the import


**Create** Scale, limited by the injection (the request response time
  + injection concurrency)


**Read** Scale, limited by the injection


**Search** Limited by elasticsearch CPU


**CRUD** Scale, limited by injection


**Reindex** Limited by elasticsearch CPU and disk IO

"

"18w33 NXP-25355 Audit block of sequence": "
These tests shows 2 ways to improve mass audit log:


- By requesting log entries by block (available in 10.3) this saves a
  round trip per log entry making audit is written much faster. The
  pgsql import is reduced from 907s to 304s.

- By changing the elasticsearch translog from `request` to `async` for
  audit and sequence indexes: It saves a fsync per audit log entries,
  this remove all the stress on disk IO and don't impact any other
  elasticsearch activity.


Combining both gives a x3.4 gain, the total import duration is 261s vs 907s.
"

"Nuxeo LTS 2017": "**Import** Better than previous LTS


- The nuxeo-importer is run on a single node so the synchronous part
  do not benefit of having multiple Nuxeo node.  The limitation is
  mostly `Nuxeo CPU` at the beginning (especially for SQL backend)
  then `Nuxeo IO on S3`, then `SQL Backend IO` and `Backend CPU`.


**Create** Scales up to 3 nodes then plateauing around 1000 req/s for MongoDB:


  - The throughput is limited by the response time (around 29ms) and
    the Gatling concurrency used (32 threads) which limit the possible
    load to 1100 req/s. This high latency regression was introduced in
    [9.1](https://jira.nuxeo.com/browse/NXP-23016) and is fixed since
    [9.10-HF09](https://jira.nuxeo.com/browse/NXP-25065).  This
    regression in the directory invalidation has impacted all REST
    requests by adding few millisecond of latency.


**Read** Scales up to 2800 req/s


  - Here also the high average response time prevent to scale above 3000 req/s,
    9.10-HF09 should be much better.

**Search** Faster search


  - Elasticsearch upgrade from 2.3 to 5.6 shows comparable performance
    with some trend in slower write and faster search. A possible
    reason for the slowness in write is because sequence and audit
    indexes are in translog request mode.


**Update/CRUD**


  - Like with the Create simulation the throughput is limited by the
    concurrency and response time.  Upgrading to HF09 should help.


**Reindex**


- A bit slower than in previous LTS.
"

"Nuxeo 9.3": "Performance regression of 9.2 on [MongoDB](https://jira.nuxeo.com/browse/NXP-22411) has been addressed.


The [audit writer has been refactored to use Nuxeo Stream](https://jira.nuxeo.com/browse/NXP-22109) this improves writes operations.


Elasticsearch upgrade from 2.3 to 5.6 shows comparable performance with some trend in slower write and faster search.


**Import** Is back to normal an even better than LTS 2016


**Create** Scales up to 3 nodes then plateauing around 1200 req/s for MongoDB:


  - The throughput is limited by the response time (around 25ms) and the Gatling concurrency used (32 threads) which limit the possible load to 1280 req/s.
    Furthermore the sync response time that limit the throughput is not bounded to Nuxeo CPU as in LTS 2016 so adding more than 3 nodes does not help.

  - The total time sync + async is improved comparing to LTS 2016 with 4 nodes from 98s to 72s (+25% faster).


**Read** Scales with number of Nuxeo nodes


**Search** ES 5.x is a bit faster.


**Update/CRUD** performance are much better than in 9.2 with the new audit logger.


  - Like with the Create simulation the throughput is limited by the concurrency and response time.

  - The async time is better than in LTS 2016


**Reindex** Slower than with Elasticsearch 2.x, ES CPU bound, can be related to a slowness of the default fulltext analyzer with the `html_strip` char filter.


"


"17w47 DBS Cache or not": "Disabling the DBS cache with `nuxeo.dbs.cache.enabled=false` has almost no impact on write operations performance at this throughput. Read operations are more impacted, the additional round trips with storage starts to be a limitation because the throughput is much higher.


The gain of disabling DBS cache in cluster mode is that Redis is not needed anymore to manage the DBS cache invalidation."

"17w45 Stream workmanager": "This test is done with a single node using the StreamWorkmanager [NXP-22107](https://jira.nuxeo.com/browse/NXP-22107) based on Chronicle Queues, the async processing is done at a better constant throughput, in the create simulation there are a lot of indexing task performed in async, the total duration sync + async moves from 161s (127s sync + 34s async) to 118s, a gain of 25%, this is visible in the indexing rate as well:

 ![Default WorkManager](https://benchmarks.nuxeo.com/build/1163/archive/reports/sim20createdocuments/overview/nxElasticsearchindex_1159_20171110.png 'Default WorkManager') ![Stream WorkManager](https://benchmarks.nuxeo.com/build/1164/archive/reports/sim20createdocuments/overview/nxElasticsearchindex_1252_20171110.png 'Stream WorkManager')

"

"17w45 Elasticsearch translog sync vs async": "By default Elasticsearch fsync its translog on every request, switching from sync to async we have only one fsync every 5s.
The result is not visible during the create document simulation because the saturation is on the Nuxeo side but the iowait decreased from 50% to ~1%.

 ![sync chart](https://benchmarks.nuxeo.com/build/1162/archive/reports/sim10massimport/overview/sysCPUIoWait_1852_20171107.png 'Sync') ![async chart](https://benchmarks.nuxeo.com/build/1161/archive/reports/sim10massimport/overview/sysCPUIoWait_1753_20171107.png 'Async')


"

"17w45 Elasticsearch Rest vs Transport client": "The difference between Rest and Transport clients is not visible, benchmarks are now done with the Rest client"

"17w29 NXP-22764 mongodb directory connection pool": "The MongoDB client used to perform requests on the database
was initialized each time a session was created. As the client already manages its [own internal connection pool](http://api.mongodb.com/java/3.3/com/mongodb/MongoClient.html),
[initializing it at the directory level](https://jira.nuxeo.com/browse/NXP-22764) enables to fix the performance regression.
"

"Nuxeo 9.2": "- When choosing a MongoDB backend [the directories is now also stored in MongoDB](https://jira.nuxeo.com/browse/NXP-22411) by default.
This first implementation of MongoDB directories has limited performance due to a [lack of connection pool](https://jira.nuxeo.com/browse/NXP-22634).
This limit drastically all the REST throughput on high load, also on high pressure [some background work fails](https://jira.nuxeo.com/browse/NXP-22780) which prevent to get some results, for instance Reindexing throughput is not available (marked as NA).
In the mean time if you need high performance on MongoDB with 9.2 we suggest you fallback to a SQL directory implementation.

- A performance [regression in the audit logger](https://jira.nuxeo.com/browse/NXP-22774) impacts all operations.
"
"17w24 NXP-22421 db constraints": "Evaluate performance impact of database constaints as explained in [NXP-22421](https://jira.nuxeo.com/browse/NXP-22421), adding 5 constraints:


- hierarchy_parentid_name_1_idx UNIQUE, btree (parentid, name) WHERE isproperty = false


- hierarchy_parentid_name_2_idx UNIQUE, btree (parentid, name) WHERE isproperty = true AND pos IS NULL


- hierarchy_parentid_name_3_idx UNIQUE, btree (parentid, name, pos) WHERE isproperty = true AND pos IS NOT NULL


- dc_subjects_id_pos_id UNIQUE, btree (id, pos)


- dc_contributors_id_pos_idx UNIQUE, btree (id, pos)


No visible performance impact on the default simulations, it might require more volume/concurrency.
"

"Nuxeo 9.1": "- A new **MarkLogic** backend has been added to the benchmark matrix.


- Since LTS 2016 the **import** has been tuned on DBS (MongoDB and MarkLogic) to [remove contentions](https://jira.nuxeo.com/browse/NXP-21712),
  [reduce the number of queries](https://jira.nuxeo.com/browse/NXP-20595) and [make cache more efficient](https://jira.nuxeo.com/browse/NXP-21678),
  improving the import throughput by **20%**.


- The **Elasticsearch reindexing** has been improved by [limiting the size of bulk command](https://jira.nuxeo.com/browse/NXP-21227) and by [reducing the JSON representation](https://jira.nuxeo.com/browse/NXP-21677),
  resulting in a **33%** gain.


- There are some regression on write and search REST operation, some are related to GC problem after JSF benchmarks, [investigations in process](https://jira.nuxeo.com/browse/NXBT-1731).
"

"Nuxeo LTS 2016": "**Import**


- The nuxeo-importer is run on a single node so the synchronous part do not benefit of having multiple Nuxeo node.
  The limitation is mostly `Nuxeo CPU` at the beginning (especially for SQL backend) then `Nuxeo IO on S3`, then `SQL Backend IO`
  and `Backend CPU`.


- The asynchronous part [has been optimized](/misc/#16w11%20NXP-17934%2fNXP-17862%20audit%20and%20fulltext%20updater) since 7.10 LTS.


**Create**


- Create and Update tests scales with the number of nodes, and it is the limitation is on `Nuxeo CPU`, MongoDB is much faster than in 7.10 because [a cache has been introduced](/misc/index.html#16w44%20NXP-20640%20DBS%20cache%20enabled) to reduce the CPU load related to queries.


**Read**


- This scales with the number of Nuxeo nodes. Here also the DBS cache works fine for MongoDB and can give more than 50% gain compared to the previous LTS.


**Search**


- The switch from Elasticsearch 1.x to 2.x with the default options [shows a performance regression](/misc/index.html#16w35%20NXP-19194%20Elasticsearch%202.x)


**Update**


- Same as Create but it requires less resources from the backend, Redis overhead present on 7.10 has been fixed. Another possible limitation may be on
  the load concurrency that is not high enough.



**CRUD**


- Same as Update, mssql encounter errors on deletion [NXP-19335](https://jira.nuxeo.com/browse/NXP-19335).


**Reindex**


- For SQL Backend except for PostgreSQL limited by `Nuxeo VCS` impedance mismatch (slow document loading). For MongoDB and PostgreSQL limited by `Elasticsearch CPU`,
  the reindexing requires less memory footprint on Nuxeo and is now able to handle billion of documents.


"

"Nuxeo 8.3": "**Import**


- The nuxeo-importer is run on a single node so the synchronous part do not benefit of having multiple Nuxeo node.
  The limitation is mostly `Nuxeo CPU` at the beginning (especially for SQL backend) then `Nuxeo IO on S3`, then `SQL Backend IO`
  and `Backend CPU`.


- The asynchronous part [has been optimized](http://localhost:1313/misc/#16w11%20NXP-17934%2fNXP-17862%20audit%20and%20fulltext%20updater) since 8.1.
  When using more than 2 nodes the asynchonous jobs are processed in real time.


**Create**


- Create and Update tests scales with the number of nodes, and it is the limitation is on `Nuxeo CPU` then `Backend IO` once there are two Nuxeo nodes.


**Read**


- This scales with the number of Nuxeo nodes. The limitation is on `Nuxeo CPU` and backend latency.


**Search**


- This scales with the number of Nuxeo nodes as `Nuxeo CPU` is the first limitation.


**Update**


- Same as Create but it requires less resources from the backend, Redis overhead present on 8.1 has been fixed. Another possible limitation may be on
  the load concurrency that is not high enough.



**CRUD**


- Same as Update, mssql encounter errors on deletion [NXP-19335](https://jira.nuxeo.com/browse/NXP-19335).


**Reindex**


- For SQL Backend except for PostgreSQL limited by `Nuxeo VCS` impedance mismatch (slow document loading). For MongoDB and PostgreSQL limited by `Elasticsearch CPU`.


"


"16w35 NXP-19194 Elasticsearch 2.x": "The default Elasticsearch 2.x settings generates more disk IO on indexing and searching, the `index.translog.durability` is set by request and limits ES to the available IOPS (~750/3500 IOPS -> ~1000 req/s).
Also deletion is now handled with a scroll and deletes instead of a single recursive operation."


"16w23 NXP-19754 Test import with random dublincore properties": "**The nuxeo importer has been enhanced to generate random dublincore value:**


- This impacts the import throughput around 30%. It is still not clear if the limitation comes from the generation or the load that it creates on services
"

"16w17 NXP-19389 Search optim": "**To improve the new Search simulation results some optimizations have been done:**


- The simulations are using an empty header `X-NXfetch.document` that results in fetching all sub entities of documents
  (due to [NXP-19581](https://jira.nuxeo.com/browse/NXP-19581)).
  Not fetching all sub entities improves Reads throughput by **27%** and Search by **x2**.


- Adding a UserManager cache ([NXP-19584](https://jira.nuxeo.com/browse/NXP-19584)) helps on high throughput.
  Read simulation improves its throughput by **6%**.


- Relying on client to choose the locale instead of fetching it from the user preference [NXP-19588](https://jira.nuxeo.com/browse/NXP-19588) benefits to all REST
  access, giving a **40%** boost on Read simulation.


All cumulated the Read simulation has been improved by **x1.9** and the Search by **2.7**.


"

"Nuxeo 8.1": "**Import**


- The nuxeo-importer is run on a single node so the synchronous part do not benefit of having multiple Nuxeo node.
  The limitation is mostly `Nuxeo CPU` at the beginning then `Nuxeo IO on S3` with `Backend CPU`.


- The asynchronous part scale with the number of nodes. More async activity impacts the backend and can explain
  the throughput decrease on synchronous part when adding Nuxeo nodes.
  The limitation is mostly due to [fulltext updater](https://jira.nuxeo.com/browse/NXP-17862).


**Create/Update**


- For synchronous part the limitation is on `Nuxeo CPU` then `Backend IO` once there are two Nuxeo nodes.

- Same observation as the import for the asynchronous part.


**Navigation**


- This scales with the number of Nuxeo nodes. The limitation is on `Nuxeo CPU` and backend response time.


**Update**


- First limited by `Nuxeo CPU`, scale with more nodes then `Backend IO` limitation or `Redis CPU/IO` for MongoDB.

- The async time is incorrect [due to a bug](https://jira.nuxeo.com/browse/NXP-19092) under Redis OOM.



**CRUD**


- Same as Update, mssql encounter errors on deletion [NXP-19335](https://jira.nuxeo.com/browse/NXP-19335).


**Reindex**


- For SQL Backend limited by `Nuxeo VCS` impedance mismatch (slow document loading). For MongoDB limited by `Elasticsearch CPU`.

"

"16w12 NXBT-1018 Test default pool size": "Having more than 4 threads in the default pool improves very slightly
asynchronous tasks.


Using a bigger pool means working with more sessions and concurrency, this impacts the synchronous part.


So far it is not interesting to use more than 4 threads for the default pool.
This should be tested again once audit and ft updater optimizations are merged because
they are the first bottlenecks at the moment and they may prevent to see benefits of increasing the default pool size."


"16w11 NXP-17934/NXP-17862 audit and fulltext updater": "This benchmark suite contains 2 major optimizations:


- [NXP-17862](https://jira.nuxeo.com/browse/NXP-17862) Fulltext updater

- [NXP-17934](https://jira.nuxeo.com/browse/NXP-17934) Audit optimization refactoring


Theses optimizaton reduce asynchronous processing duration from **7x** to **11x**.

The gain comes mostly from the ft updater refactoring and 30% from audit refactoring.

The total benchmark duration is shorter from ~**75** min to ~**40** min.
"

"16w08 NXP-14923 Redis vs DB invalidation": "This suite test the default database cluster invalidation against the Redis
implementation [NXP-14923](https://jira.nuxeo.com/browse/NXP-14923).

On heavy concurrent write operation the gain can be around **2x**.
"
